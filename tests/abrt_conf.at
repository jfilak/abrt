# -*- Autotest -*-
# vim:set makeprg=rm\ testsuite;\ make\ testsuite;\ ./testsuite\ -v\ ??

AT_BANNER([abrt_conf])

AT_TESTFUN([load_abrt_conf_normalized_paths], [[
#include <libreport/helpers/testsuite.h>
#include "libabrt.h"
#include <assert.h>

struct result
{
    const char *line;
    const char *const *global_option;
    const char *expected;
};

void test(struct result **res)
{
    char conf_file[] = "/tmp/abrt_test.conf.XXXXXX";
    int conf_fd = mkstemp(conf_file);
    assert(conf_fd >= 0 && "Temporary test configuration file");

    printf("**** %s\n", conf_file);
    for (struct result **iter = res; NULL != *iter; ++iter)
    {
        if ((*iter)->line != NULL)
        {
            printf("---- %s", (*iter)->line);
            full_write_str(conf_fd, (*iter)->line);
        }
    }
    puts("----");

    close(conf_fd);

    setenv("ABRT_DEFAULT_CONF_DIR", "/tmp", 1);
    setenv("ABRT_CONF_DIR", "/tmp", 1);
    setenv("ABRT_CONF_FILE_NAME", strrchr(conf_file, '/') + 1, 1);

    /*
    int old_stderr = dup(STDERR_FILENO);
    int errpipe[2];
    pipe(errpipe);
    fcntl(ts_pipefd[0], F_SETFL, O_NONBLOCK);
    dup2(errpipe[1], STDERR_FILENO);
    */

    load_abrt_conf();

    /*
    dup2(old_stderr, STDERR_FILENO);
    char *error_output = xmalloc_read(errpipe[0], NULL);
    close(errpipe[0]);
    */

    unsetenv("ABRT_CONF_FILE_NAME");
    unsetenv("ABRT_CONF_DIR");
    unsetenv("ABRT_DEFAULT_CONF_DIR");

    for (struct result **iter = res; NULL != *iter; ++iter)
    {
        TS_ASSERT_STRING_EQ(*(*iter)->global_option, (*iter)->expected, "Configured value");
    }

    free_abrt_conf_data();
}

int main(int argc, char *argv[])
{
    g_verbose = 3;

    {
        struct result res_dump_location = {
            .line = "DumpLocation = /foo/blah/abrt\n",
            .global_option = (const char *const *)&g_settings_dump_location,
            .expected = "/foo/blah/abrt",
        };

        struct result res_archive_dir = {
            .line = "WatchCrashdumpArchiveDir = /opt/bar/abrt\n",
            .global_option = (const char *const *)&g_settings_sWatchCrashdumpArchiveDir,
            .expected = "/opt/bar/abrt",
        };

        struct result res_sysroot_path = {
            .line = "SysRootPath = /opt/bar/abrt\n",
            .global_option = (const char *const *)&g_settings_sysroot_path,
            .expected = "/opt/bar/abrt",
        };

        struct result *results[] = {
            &res_dump_location,
            &res_archive_dir,
            &res_sysroot_path,
            NULL,
        };

        test(results);
    }

    {
        struct result res_dump_location = {
            .line = "DumpLocation = /foo/blah/abrt////\n",
            .global_option = (const char *const *)&g_settings_dump_location,
            .expected = "/foo/blah/abrt",
        };

        struct result res_archive_dir = {
            .line = "WatchCrashdumpArchiveDir = /opt/bar/abrt////\n",
            .global_option = (const char *const *)&g_settings_sWatchCrashdumpArchiveDir,
            .expected = "/opt/bar/abrt",
        };

        struct result res_sysroot_path = {
            .line = "SysRootPath = /opt/bar/abrt////\n",
            .global_option = (const char *const *)&g_settings_sysroot_path,
            .expected = "/opt/bar/abrt",
        };

        struct result *results[] = {
            &res_dump_location,
            &res_archive_dir,
            &res_sysroot_path,
            NULL,
        };

        test(results);
    }

    {
        struct result res_dump_location = {
            .line = "DumpLocation = /foo//blah///abrt\n",
            .global_option = (const char *const *)&g_settings_dump_location,
            .expected = "/foo/blah/abrt",
        };

        struct result res_archive_dir = {
            .line = "WatchCrashdumpArchiveDir = /opt//bar///abrt\n",
            .global_option = (const char *const *)&g_settings_sWatchCrashdumpArchiveDir,
            .expected = "/opt/bar/abrt",
        };

        struct result res_sysroot_path = {
            .line = "SysRootPath = /opt//bar///abrt\n",
            .global_option = (const char *const *)&g_settings_sysroot_path,
            .expected = "/opt/bar/abrt",
        };

        struct result *results[] = {
            &res_dump_location,
            &res_archive_dir,
            &res_sysroot_path,
            NULL,
        };

        test(results);
    }

    {
        struct result res_dump_location = {
            .line = "DumpLocation = /////\n",
            .global_option = (const char *const *)&g_settings_dump_location,
            .expected = "/",
        };

        struct result res_archive_dir = {
            .line = "WatchCrashdumpArchiveDir = /////\n",
            .global_option = (const char *const *)&g_settings_sWatchCrashdumpArchiveDir,
            .expected = "/",
        };

        struct result res_sysroot_path = {
            .line = "SysRootPath = /////\n",
            .global_option = (const char *const *)&g_settings_sysroot_path,
            .expected = "/",
        };

        struct result *results[] = {
            &res_dump_location,
            &res_archive_dir,
            &res_sysroot_path,
            NULL,
        };

        test(results);
    }

    {
        struct result res_dump_location = {
            .line = "DumpLocation =    /////   \n",
            .global_option = (const char *const *)&g_settings_dump_location,
            .expected = "/",
        };

        struct result res_archive_dir = {
            .line = "WatchCrashdumpArchiveDir =    /////   \n",
            .global_option = (const char *const *)&g_settings_sWatchCrashdumpArchiveDir,
            .expected = "/",
        };

        struct result res_sysroot_path = {
            .line = "SysRootPath =    /////   \n",
            .global_option = (const char *const *)&g_settings_sysroot_path,
            .expected = "/",
        };

        struct result *results[] = {
            &res_dump_location,
            &res_archive_dir,
            &res_sysroot_path,
            NULL,
        };

        test(results);
    }

    {
        struct result res_dump_location = {
            .line = "DumpLocation =    /////some   white/space  in  /path  ///   \n",
            .global_option = (const char *const *)&g_settings_dump_location,
            .expected = "/some   white/space  in  /path  ",
        };

        struct result res_archive_dir = {
            .line = "WatchCrashdumpArchiveDir =    /////some   white/space  in  /path  ///  \n",
            .global_option = (const char *const *)&g_settings_sWatchCrashdumpArchiveDir,
            .expected = "/some   white/space  in  /path  ",
        };

        struct result res_sysroot_path = {
            .line = "SysRootPath =    /////some   white/space  in  /path  ///  \n",
            .global_option = (const char *const *)&g_settings_sysroot_path,
            .expected = "/some   white/space  in  /path  ",
        };

        struct result *results[] = {
            &res_dump_location,
            &res_archive_dir,
            &res_sysroot_path,
            NULL,
        };

        test(results);
    }

    return 0;
}
]])

AT_TESTFUN([SysRootPath], [[
#include "libabrt.h"
#include <libreport/helpers/testsuite.h>
#include <assert.h>

struct result
{
    const char *line;
    const char *const *global_option;
    const char *expected;
};

void test(struct result **res)
{
    char conf_file[] = "/tmp/abrt_test.conf.XXXXXX";
    int conf_fd = mkstemp(conf_file);
    assert(conf_fd >= 0 && "Temporary test configuration file");

    printf("**** %s\n", conf_file);
    for (struct result **iter = res; NULL != *iter; ++iter)
    {
        if ((*iter)->line != NULL)
        {
            printf("---- %s", (*iter)->line);
            full_write_str(conf_fd, (*iter)->line);
        }
    }
    puts("----");

    close(conf_fd);

    setenv("ABRT_DEFAULT_CONF_DIR", "/tmp", 1);
    setenv("ABRT_CONF_DIR", "/tmp", 1);
    setenv("ABRT_CONF_FILE_NAME", strrchr(conf_file, '/') + 1, 1);

    load_abrt_conf();

    unsetenv("ABRT_CONF_FILE_NAME");
    unsetenv("ABRT_CONF_DIR");
    unsetenv("ABRT_DEFAULT_CONF_DIR");

    for (struct result **iter = res; NULL != *iter; ++iter) {
        TS_ASSERT_STRING_EQ(*(*iter)->global_option, (*iter)->expected, "Configured value");
    }

    free_abrt_conf_data();
}

TS_MAIN
{
    {
        struct result res_sysroot_path = {
            .line = "\n",
            .global_option = (const char *const *)&g_settings_sysroot_path,
            .expected = NULL,
        };

        struct result *results[] = {
            &res_sysroot_path,
            NULL,
        };

        test(results);
    }

    {
        struct result res_sysroot_path = {
            .line = "SysRootPath = /host\n",
            .global_option = (const char *const *)&g_settings_sysroot_path,
            .expected = "/host",
        };

        struct result *results[] = {
            &res_sysroot_path,
            NULL,
        };

        test(results);
    }

    {
        struct result res_sysroot_path = {
            .line = "SysRootPath = /from/env\n",
            .global_option = (const char *const *)&g_settings_sysroot_path,
            .expected = "/sysroot/path",
        };

        struct result *results[] = {
            &res_sysroot_path,
            NULL,
        };

        xsetenv(ABRT_SYSROOT_PATH_ENV, "/sysroot/path");
        test(results);
        unsetenv(ABRT_SYSROOT_PATH_ENV);
    }
}
TS_RETURN_MAIN
]])
