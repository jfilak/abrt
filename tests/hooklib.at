# -*- Autotest -*-

AT_BANNER([hooklib])

AT_TESTFUN([dir_is_in_dump_location],
[[
#include "libabrt.h"
#include <assert.h>

void test(char *name, bool expected)
{
    if (dir_is_in_dump_location(name) != expected)
    {
        fprintf(stderr, "Bad: %s", name);
        abort();
    }

    free(name);
}

int main(void)
{
    g_verbose = 3;
    load_abrt_conf();

    g_verbose = 3;

    char *name;

    assert(dir_is_in_dump_location("/") == false);

    asprintf(&name, "%s", g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s..evil", g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/", g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s///", g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/.", g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s///.", g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/./", g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/.///", g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/..", g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s///..", g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/../", g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/..///", g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/good/../../../evil", g_settings_dump_location);
    test(name, false);

    asprintf(&name, "%s/good..still", g_settings_dump_location);
    test(name, true);

    asprintf(&name, "%s/good.new", g_settings_dump_location);
    test(name, true);

    asprintf(&name, "%s/.meta", g_settings_dump_location);
    test(name, true);

    asprintf(&name, "%s/..data", g_settings_dump_location);
    test(name, true);

    return 0;
}
]])

AT_TESTFUN([abrt_problem_entry_is_post_create_condition],
[[
#include "libabrt.h"
#include <assert.h>

int main(void)
{
    g_verbose = 3;
    load_abrt_conf();

    assert(problem_entry_is_post_create_condition(FILENAME_TYPE));
    assert(problem_entry_is_post_create_condition(FILENAME_ANALYZER));
    assert(problem_entry_is_post_create_condition("basename"));

    assert(!problem_entry_is_post_create_condition(FILENAME_TIME));
    assert(!problem_entry_is_post_create_condition(FILENAME_COUNT));
    assert(!problem_entry_is_post_create_condition(FILENAME_REMOTE));
    assert(!problem_entry_is_post_create_condition(FILENAME_PACKAGE));
    assert(!problem_entry_is_post_create_condition(FILENAME_COMPONENT));

    return 0;
}
]])

AT_TESTFUN([get_problem_sys_root_path_from_dump_dir], [[
#include <helpers/testsuite.h>
#include <helpers/testsuite_tools.h>

#include "libabrt.h"

void test_case(const char *sysroot,
               const char *containerroot,
               const char *chroot,
               const char *result)
{
    TS_PRINTF("++++ Case: %s %s %s\n", sysroot, containerroot, chroot);

    struct dump_dir *dd = testsuite_dump_dir_create(getuid(),
                                                    /*0640*/ (mode_t)-1,
                                                    /*unused flags*/0);

    g_settings_sysroot_path = (char *)sysroot;

    if (containerroot)
        dd_save_text(dd, FILENAME_CONTAINER_ROOTFS, containerroot);

    if (chroot)
        dd_save_text(dd, FILENAME_ROOTDIR, chroot);

    char *rootdir = get_problem_sys_root_path_from_dump_dir(dd);

    TS_ASSERT_STRING_EQ(rootdir, result, "");

    free(rootdir);

    g_settings_sysroot_path = NULL;

    testsuite_dump_dir_delete(dd);

    TS_PRINTF("---- End Case: %s %s %s\n", sysroot, containerroot, chroot);
}

TS_MAIN
{
    test_case(NULL,       NULL,      NULL,      "/");
    test_case("/sysroot", NULL,      NULL,      "/sysroot");
    test_case(NULL,       "/ctroot", NULL,      "/ctroot");
    test_case("/sysroot", "/ctroot", NULL,      "/sysroot/ctroot");
    test_case(NULL,       NULL,      "/chroot", "/chroot");
    test_case("/sysroot", NULL,      "/chroot", "/sysroot/chroot");
    test_case(NULL,       "/ctroot", "/chroot", "/ctroot/chroot");
    test_case("/sysroot", "/ctroot", "/chroot", "/sysroot/ctroot/chroot");
}
TS_RETURN_MAIN
]])
